GENOTYPE = config['GENOTYPE']
PACBIO_DIR = config['PACBIO_DIR']
RAGTAG_REF = config['RAGTAG_REF']

wildcards = glob_wildcards(config['PACBIO_DIR'] + "/{sample}.bam")
SAMPLES = wildcards.sample

rule all:
    input:
        expand("results/{genotype}.ragtag.scaffold.fa", genotype = GENOTYPE), 
        expand("results/plots/{genotype}_ragtag_alignment.jpeg", genotype = GENOTYPE)

rule bam_to_fastq:
    input:
        expand("{dir}/{{sample}}.bam", dir = PACBIO_DIR)
    output:
        "results/fastq/{sample}.fastq.gz"
    params:
        outprefix = "results/fastq/{sample}"
    log:
        "logs/bam_to_fastq/{sample}.log"
    threads: 12
    shell:
        "bam2fastq -j {threads} -c 1 -o {params.outprefix} {input} 2> {log}"

rule filter_adapter:
    input:
        "results/fastq/{sample}.fastq.gz"
    output:
        "results/filtered/{sample}.fastq"
    log:
        "logs/filter_adapter/{sample}.log"
    threads: 12
    shell:
        """
            cutadapt -j {threads} --revcomp -e 0.1 --discard-trimmed \
            -b "AAAAAAAAAAAAAAAAAATTAACGGAGGAGGAGGA;min_overlap=34" \
            -b "ATCTCTCTCTTTTCCTCCTCCTCCGTTGTTGTTGTTGAGAGAGAT;min_overlap=40" \
            {input} > {output} 2> {log}
        """

rule trim_adapter:
    input:
        "results/filtered/{sample}.fastq", 
    output:
        "results/trimmed_filtered/{sample}.fastq"
    log:
        "logs/trim_adapter/{sample}.log"
    threads: 12
    shell:
        """
            cutadapt -j {threads} --revcomp -e 0.1 \
            -b AAAAAAAAAAAAAAAAAATTAACGGAGGAGGAGGA \
            -b ATCTCTCTCTTTTCCTCCTCCTCCGTTGTTGTTGTTGAGAGAGAT \
            {input} > {output} 2> {log}
        """

rule assemble_contigs:
    input:
        expand("results/trimmed_filtered/{sample}.fastq", sample = SAMPLES)
    output:
        "results/hifiasm/hifiasm.asm.bp.p_ctg.gfa"
    log:
        "logs/assemble_contigs.log"
    threads: 48
    params:
        prefix = "results/hifiasm/hifiasm.asm"
    shell:
        "hifiasm -t {threads} -l0 -i -f38 -o {params.prefix} {input} 2> {log}"

rule extract_fasta:
    input:
        "results/hifiasm/hifiasm.asm.bp.p_ctg.gfa"
    output:
        "results/hifiasm/hifiasm.asm.bp.p_ctg.fasta"
    log:
        "logs/extract_fasta.log"
    shell:
        "python scripts/gfa_to_fasta.py {input} {output} 2> {log}"

rule scaffold_contigs:
    input:
        contigs = "results/hifiasm/hifiasm.asm.bp.p_ctg.fasta", 
        ref = RAGTAG_REF
    output:
        multiext(
            "results/ragtag/ragtag.scaffold", 
            ".agp", 
            ".asm.paf", 
            ".asm.paf.log", 
            ".confidence.txt", 
            ".err", 
            ".fasta", 
            ".stats", 
        )
    params:
        outdir = "results/ragtag"
    log:
        "logs/scaffold_contigs.log"
    threads: 48
    shell:
        "ragtag.py scaffold --mm2-params '-I 200g -x asm5' -t {threads} "
        "-o {params.outdir} {input.ref} {input.contigs} 2> {log}"

rule rename_assembly:
    input:
        "results/ragtag/ragtag.scaffold.fasta"
    output:
        "results/{genotype}.ragtag.scaffold.fa"
    shell:
        "cp {input} {output}"

rule plot_coverage:
    input:
        paf = "results/ragtag/ragtag.scaffold.asm.paf"
    output:
        plot = "results/plots/{genotype}_ragtag_alignment.jpeg"
    shell:
        "Rscript scripts/plot_coverage.R {input.paf} {output.plot}"
